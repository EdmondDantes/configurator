<?php
declare(strict_types=1);

namespace IfCastle\Configurator;

use IfCastle\DI\Exceptions\ConfigException;
use IfCastle\Exceptions\RuntimeException;
use IfCastle\OsUtilities\FileSystem\Exceptions\FileIsNotExistException;
use IfCastle\ServiceManager\RepositoryStorages\RepositoryReaderByScopeInterface;
use IfCastle\ServiceManager\RepositoryStorages\RepositoryWriterInterface;

class ServiceConfigMutable          extends ConfigIniMutable
                                    implements RepositoryWriterInterface, RepositoryReaderByScopeInterface
{
    use ServiceConfigReaderTrait;
    
    /**
     * @throws RuntimeException
     * @throws FileIsNotExistException
     * @throws \ErrorException
     * @throws ConfigException
     */
    #[\Override]
    public function addServiceConfig(string     $serviceName,
                                     array      $serviceConfig,
                                     array|null $includeTags = null,
                                     array|null $excludeTags = null
    ): void
    {
        if(array_key_exists(self::IS_ACTIVE, $serviceConfig) === false) {
            $serviceConfig[self::IS_ACTIVE] = false;
        }
        
        if(array_key_exists(self::TAGS, $serviceConfig) === false && $includeTags !== null) {
            $serviceConfig[self::TAGS] = $includeTags;
        }
        
        if(array_key_exists(self::EXCLUDE_TAGS, $serviceConfig) && $excludeTags !== null) {
            $serviceConfig[self::EXCLUDE_TAGS] = $excludeTags;
        }
        
        $this->set($serviceName, $serviceConfig);
    }
    
    /**
     * @throws RuntimeException
     * @throws FileIsNotExistException
     * @throws ConfigException
     * @throws \ErrorException
     */
    #[\Override]
    public function removeServiceConfig(string $serviceName): void
    {
        $this->remove($serviceName);
    }
    
    #[\Override]
    public function updateServiceConfig(
        string $serviceName,
        array  $serviceConfig,
        array|null $includeTags = null,
        array|null $excludeTags = null
    ): void
    {
        if($includeTags !== [] && $includeTags !== null) {
            $serviceConfig[self::TAGS] = $includeTags;
        }
        
        if($excludeTags !== [] && $excludeTags !== null) {
            $serviceConfig[self::EXCLUDE_TAGS] = $excludeTags;
        }
        
        $this->mergeSection($serviceName, $serviceConfig);
    }
    
    /**
     * @throws RuntimeException
     * @throws FileIsNotExistException
     * @throws \ErrorException
     * @throws ConfigException
     */
    #[\Override]
    public function activateService(string $serviceName): void
    {
        if($this->findServiceConfig($serviceName) === null) {
            throw new \InvalidArgumentException("Service '$serviceName' is not found");
        }
        
        $this->mergeSection($serviceName, [self::IS_ACTIVE => true]);
    }
    
    #[\Override]
    public function deactivateService(string $serviceName): void
    {
        if($this->findServiceConfig($serviceName) === null) {
            throw new \InvalidArgumentException("Service '$serviceName' is not found");
        }
        
        $this->mergeSection($serviceName, [self::IS_ACTIVE => false]);
    }
    
    /**
     * @throws RuntimeException
     * @throws FileIsNotExistException
     * @throws ConfigException
     * @throws \ErrorException
     */
    #[\Override]
    public function changeServiceTags(string $serviceName, array|null $includeTags = null, array|null $excludeTags = null): void
    {
        if($this->findServiceConfig($serviceName) === null) {
            throw new \InvalidArgumentException("Service '$serviceName' is not found");
        }
        
        $data                       = [];
        
        if($includeTags !== [] && $includeTags !== null) {
            $data[self::TAGS]       = $includeTags;
        }
        
        if($excludeTags !== [] && $excludeTags !== null) {
            $data[self::EXCLUDE_TAGS] = $excludeTags;
        }
        
        $this->mergeSection($serviceName, $data);
    }
    
    #[\Override]
    public function saveRepository(): void
    {
        $this->save();
    }
    
    protected function afterBuild(string $content): string
    {
        $at                         = date('Y-m-d H:i:s');
        $comment                    = <<<INI
; ================================================================
; This file is generated by the IfCastle Configurator
; at $at
; Do not edit this file manually!
; ================================================================
INI;
        return $comment.$content;
    }
}